TIL

Section 2 회고를 마치고
부족하다고 생각했던 서버를 복습했다 분명 배웠는데 세상 낯설다
개념을 학습하고 나만의 언어로 풀어서 적어봤다 ㅎ 잘못된 내용이 있을 수 있다 (중요)

[클라이언트-서버 아키텍처]
2티어 아키텍처라고도 하며 리소스를 제공하는 곳과 리소스를 사용하는 앱을 구분한 것이다
클라이언트에서 요청을 선행하면 서버에서 응답을 하는 관계이다

서버에서 별도로 데이터베이스 공간을 마련하여 리소스를 저장하고 서버는 리소스를 전달만 해주는 것을 3티어 아키텍처라고 한다

2티어와의 차이점은 사용자 수가 증가했을 때의 성능 측면인 것 같다
3티어 아키텍처의 경우 동시 사용자 수가 증가해도 일정한 응답속도와 처리량을 보장한다고 한다
또한 시스템 관리 측면에서도 다양한 모니터링이 가능하여 관리가 용이하다

클라이언트의 종류는 웹페이지, 모바일앱 등이 있고
서버의 종류는 무엇을 하는지에 따라 웹 서버, 파일 서버 등이 있다


[클라이언트-서버 통신]
클라이언트와 서버가 통신을 하기 위해서 서로 약속한 규약이 있다
이것이 바로 프로토콜!
프로토콜의 종류는 엄청 다양하지만 그 중에서 우리가 살펴볼 건 HTTP 이다

클라이언트와 서버가 요청과 응답을 할 때 HTTP 메세지를 사용한다

OSI 7 Layer 응용계층에 속해있는 HTTP 는
HTML 과 JSON 정보를 주고받는 프로토콜이다

HTTP 에서 보안이 강화된 프로토콜은 HTTPS 이다

[API]
Application Programming Interface 의 약자
클라이언트에서 서버에게 요청을 할 때 인터페이스를 사용하여 통신하는 것을 말한다
API 는 서버가 클라이언트에게 요청을 잘 할 수 있도록 인터페이스 제공하는 것이고
가장 많이 사용하는 것이 REST API 이다

REST API 는 클라이언트가 서버 데이터에 접근하는데 사용할 수 있는 함수의 집합니다

API로 데이터를 요청할 때는 HTTP 프로토콜을 사용하며 주소 (URL,URI)를 통해 접근할 수 있다
파라미터를 사용하기 위해 ? , & 기호를 사용한다

API에서 사용하는 HTTP는 요청에 따라 메서드가 존재하는데 
CRUD 에 따라 적절하게 사용해주는 것이  (멱등성을 위해서)

멱등성 : 연산을 여러번 적용해도 결과가 달라지지 않는 것

Create : POST
Read : GET
Update : PUT, PATCH
Delete : DELETE


공부하면서 도움이 되었던 곳
https://aws.amazon.com/ko/what-is/api/
https://developer.mozilla.org/ko/docs/Web/HTTP/Methods
https://developer.mozilla.org/ko/docs/Glossary/Idempotent